mapclear
:set rnu
:set surround
set scrolloff=2
nmap zso :source ~\.ideavimrc <CR>
nmap z; $a;<Esc>
imap z; <Esc>$a;

nmap ,p "0p
nmap ,P "0P
imap z,p <Esc>"0pa
imap z,P <Esc>"0Pa
:nmap z, $a,<Esc>
:nmap z. vi}
:nmap z) vi)
:nmap z} vi}
:nmap z> vit
:nmap c> cit
:nmap z" vi"
:nmap zcc ci"
:nmap zxx ci]
:nmap zaa ca"
:imap jj <Esc>
:nmap <BS> a<BS>
:nmap zh ^
:nmap hh ^
:imap zh <Esc>I
:nmap zl 
:nmap ll $
:imap zl <End>
:nmap hc ^C
:nmap zb ciw
:vmap zb <Esc>ciw
:imap zd <Esc>dd
nmap qq ZQ
:nmap <BS> a<BS>
imap <F1> <Esc>0ma?[T<CR>0y`a`aP?[T<CR>w
nmap <F1> 0ma?[T<CR>0y`a`aP?[T<CR>w
imap <A-F1> <Esc>may?[F<CR>`ap?void<CR>wzz
nmap <A-F1> may?[F<CR>`ap?void<CR>wzz

imap zae Assert.AreEqual(expected,actual);<Esc>T(
nmap zae aAssert.AreEqual(expected,actual);<Esc>T(

nmap zk :action Back<CR>
imap zk <Esc>:action Back<CR>
nmap zj :action Forward<CR>
imap zj <Esc>:action Forward<CR>
#nmap zn :action ReSharperGotoPrevErrorInSolution<CR>
nmap zn :action GotoNextError<CR>
imap zn <Esc>:action GotoNextError<CR>
nmap zf :action GotoDeclaration<CR>
nmap zF :action RdParameterDeclarationNavigationAction<CR>
imap zf <Esc>:action GotoDeclaration<CR>
imap zF <Esc>:action RdParameterDeclarationNavigationAction<CR>
nmap zi :action GotoImplementation<CR>
imap zi <Esc>:action GotoImplementation<CR>
nmap zgc zz:action CheckinProject<CR>

map zrr :action RenameElement<CR>

nmap zra <Action>(ReformatCode)lzzh:<Action>(RiderUnitTestRunSolutionAction)

map zri :action Inline<CR>
imap zri <Esc>:action Inline<CR>
map zrf :action IntroduceField<CR>
imap zrf <Esc>:action IntroduceField<CR>
vmap zrp :action IntroduceParameter<CR>

nmap zsp vi":action IntroduceParameter<CR>

nmap zsc :action SilentCodeCleanup<CR>


map zrv :action IntroduceVariable<CR>
vmap zrv :action IntroduceVariable<CR>
imap zrv :action IntroduceVariable<CR>
vmap M :action ExtractMethod<CR>
nmap zrt ?[T<CR>jzt:action RiderUnitTestRunContextAction<CR>
nmap zrc ?class<CR>zt:action RiderUnitTestRunContextAction<CR>
map zro :action Move<CR>
imap zro <Esc>:action Move<CR>
map <C-D> :action EditorDuplicateLines<CR>
imap <C-D> <Esc>:action EditorDuplicateLines<CR>
map <C-A-K> :action MoveLineUp<CR>:action VimAutoIndentLines<CR>
imap <C-A-K> <Esc>:action MoveLineUp<CR>:action VimAutoIndentLines<CR>
map <C-A-J> :action MoveLineDown<CR>:action VimAutoIndentLines<CR>
imap <C-A-J> <Esc>:action MoveLineDown<CR>:action VimAutoIndentLines<CR>
map <A-D> :action EditorDeleteLine<CR>
imap <A-D> <Esc>:action EditorDeleteLine<CR>

nmap zm :action BuildSolutionAction<CR>
nmap <A-u> :redo<CR>
nmap <C-w> :action SmartSelect<CR>:action VimVisualSwapSelections<CR>

:nmap ,m :action ReformatCode<CR>:action FileStructurePopup<CR>
:vmap \s :action SurroundWith<CR>
:nmap zrs dd?class<CR>jo[SetUp]<CR>public<Space>void<Space>SetUp(){<CR>}<Esc>P:action SilentCodeCleanup<CR>
:nmap zrx dd?SetUp<CR>j%P:action SilentCodeCleanup<CR>

nmap <C-CR> mza<CR><Esc>`z

:nmap <Space> :action AceAction<CR>
:nmap ,g :action Generate<CR>
#nmap <C-n> :action NewElementSamePlace<CR>
:nmap ,c :action NewElementSamePlace<CR>
:nmap <A-l> :set rnu!<CR>

nnoremap <Tab> >>
nnoremap <S-Tab> <<

nmap <C-s> :action ReformatCode<CR>zz:action SaveDocument<CR>
imap <C-s> <Esc>:action ReformatCode<CR>zz:action SaveDocument<CR>
nmap <A-Down> :action MoveLineDown<CR>
nmap <A-Up> :action MoveLineUp<CR>
nmap zpl :action Git.Pull<CR>
nmap zu :action ShowUsages<CR>
nmap zw :action SilentCodeCleanup<CR><CR>
nmap zq :action GotoTypeDeclaration<CR>

